#include <gtest/gtest.h>
// #include <vector>
#include "collision_vo/admissible_velocities.h"

TEST(TwoPoints, WhenCalculatingDistanceSquare_CorrectDistanceIsReturned)
{
  double numPoints{4};
  std::vector<Eigen::Vector2d> admissibleVelocities;
  Eigen::VectorXd state(13);
  state << -10,0,0, 0,0,0, 1,0,0,0, 0,0,0;
  Eigen::Vector4d q = state.segment<4>(6);
  state.segment<4>(6) = q.normalized();
  double dt(0.1);
  set_admissible_velocities(numPoints,state,dt,admissibleVelocities);

  // Eigen::Vector2d truePoints[] = {
  //   Eigen::Vector2d{3.0, 2.159409027098242},
  //   Eigen::Vector2d{2.9920770896067834, 2.1654075715844936},
  //   Eigen::Vector2d{2.9992852792118287, 2.1654080062915346},
  //   Eigen::Vector2d{2.9913623639428795, 2.171408988644081},
  //   Eigen::Vector2d{3.0043188180477873, 2.1570118452557243},
  //   Eigen::Vector2d{2.996395904980124, 2.1630105987732056},
  //   Eigen::Vector2d{3.003604095019876, 2.1630105987732056},
  //   Eigen::Vector2d{2.9956811819522127, 2.1690118452557243},
  //   Eigen::Vector2d{3.0043188180477873, 2.1498036562264136},
  //   Eigen::Vector2d{2.996395904980124, 2.1558024648618628},
  //   Eigen::Vector2d{3.003604095019876, 2.1558024648618628},
  //   Eigen::Vector2d{2.9956811819522127, 2.1618036562264136},
  //   Eigen::Vector2d{3.0086376360571205, 2.147408988644081},
  //   Eigen::Vector2d{3.0007147207881713, 2.1534080062915346},
  //   Eigen::Vector2d{3.0079229103932166, 2.153407571584493},
  //   Eigen::Vector2d{3.0, 2.159409027098242}
  // };


  // for(int i(0); i<admissibleVelocities.size(); i++)
  // {
  //   std::cout << "[" <<  admissibleVelocities[i][0] << "," << admissibleVelocities[i][1] << "]," << std::endl;
  //   // EXPECT_NEAR(truePoints[i][0], admissibleVelocities[i][0], 1e-8);
  //   // EXPECT_NEAR(truePoints[i][1], admissibleVelocities[i][1], 1e-8);
  // }
}

// TEST(PointsAndWieghtsFromCloud, WhenCalculatingCurveFit_RightCurveIsCalculated)
// {
//   Eigen::VectorXd x(50);
//   x << -2.48465993, -3.37225925,  1.30133396,  2.07113267, -1.57896277,
//        -1.76750674, -1.50038634,  2.15829603, -2.27169633, -1.58529313,
//         2.04931256,  2.84345672,  0.91037321, -1.49922123,  2.23090606,
//        -1.09831693, -1.33223642, -1.73287972, -3.0871034 ,  2.44011238,
//        -0.67741749,  2.09920728, -1.12913437, -1.60192509,  1.47222802,
//         0.23848154,  1.45722136, -0.21591898, -0.30884462, -1.09431222,
//         0.18859451, -2.84383867,  2.18281565,  0.90754198, -1.70287768,
//         4.49773075,  0.59337689, -0.86735021, -0.30422069, -0.39033101,
//        -0.68788814,  0.15268202, -1.37029071,  2.36164047, -1.02729385,
//        -0.63292918, -1.44540229,  0.86994218, -0.25594302, -0.38979412;
//
//   Eigen::VectorXd y(50);
//   y << 5.22522262, -1.95095498,  0.08182176, -1.81957756, -0.22751615,
//         1.7699469 ,  0.68396636,  1.01089353,  2.42740278,  1.95428037,
//        -0.58761243,  0.90772092, -1.74163406,  2.59611203,  1.23442887,
//        -0.1837679 , -1.62355428,  0.67011683,  2.27715815, -0.95404055,
//        -2.69596796, -0.71978281,  1.23449771, -0.58073122,  1.01943246,
//        -1.31807908,  0.98259268, -0.08907081, -0.09213099, -0.75895435,
//         2.41629958,  3.33082912,  1.02973062, -1.39810569, -0.95030518,
//        -1.16667238, -0.64925963,  3.43111552, -4.45241157,  2.40420908,
//         2.13220332, -2.32095618,  1.92280958,  1.53294395,  0.12909709,
//        -2.97041838,  0.92850067,  0.00658098, -0.3644678 , -2.55426678;
//
//   Eigen::VectorXd z(50);
//   z << -1.03848173, -2.04288578, -0.82466894,  2.75481702, -0.19201558,
//        -1.69706853,  2.10961186,  0.69854636, -0.37963967,  4.86564263,
//         1.71179337,  0.51648389, -0.46741587, -1.50214346,  0.81212018,
//        -0.20730594, -2.92089388, -0.66118281,  1.19349065,  0.78874298,
//        -1.0570164 , -0.96000955, -0.94070892, -1.97603186, -1.85403735,
//        -0.66768089,  4.38595248, -0.24983039,  3.74588188, -2.03440479,
//         0.45718557, -0.79749376,  2.25426293, -2.52052906,  1.61118391,
//        -0.29537642,  0.04542785,  0.16580562,  0.52945266, -1.37860746,
//        -0.82759149,  1.49744725,  2.10991545,  0.85912527,  1.25236231,
//        -2.40385571, -2.3775966 ,  1.22832858,  2.90301377,  0.69606333;
//
//   int numberCoef{10};
//   Eigen::VectorXd trueCoef(numberCoef);
//   trueCoef << 0.2700746,   0.36950608,  0.19745639, -0.01007714, -0.11620749,
//               -0.01452275, -0.02243603,  0.02091827,  0.03197114, -0.01415514;
//
//   int order{3};
//   Eigen::VectorXd Coef(numberCoef);
//
//   curve_fit(order,x,y,z,Coef);
//
//   for(int i(0); i<Coef.size(); i++)
//   {
//     EXPECT_NEAR(Coef[i], trueCoef[i], 1e-8);
//   }
// }
//
// TEST(CoeficientsAndPoints, WhenCalculatingValuesOnACurce_RightValuesAreCalculated)
// {
//   Eigen::VectorXd x_in(50);
//   x_in << -0.08733693,  2.61383452, -3.14471016, -0.51346732,  0.07985049,
//         1.82503711,  1.79555781, -2.8810826 , -0.85949934, -2.94820313,
//        -0.38069237, -2.3101631 ,  0.42439664, -1.78711829, -0.6292477 ,
//         1.74369007,  1.88301784,  1.79384716, -2.00364042,  0.32522897,
//        -0.14039347, -1.73226471,  0.23210624,  0.49950889, -0.8750056 ,
//        -2.14912601, -1.36995104, -1.64600082,  0.45692855,  0.23760351,
//         1.73884587, -1.03220409, -2.59115318, -2.39898101, -0.18501705,
//        -0.61291234, -0.53549568, -1.04580444,  2.44997031,  0.35356499,
//        -2.09419761,  1.04707437, -1.66626797, -1.75684317, -0.30077911,
//         2.87489174,  2.15518564, -2.43145837,  2.88966369, -1.21809971;
//
//   Eigen::VectorXd y_in(50);
//   y_in << -2.16534256,  0.11705229, -3.67894509,  1.93571367, -1.16587461,
//         0.37700957, -1.74077868, -3.60705374, -2.73235987,  1.31021616,
//        -1.72254352,  1.35399489, -0.93056111,  1.31873771, -0.18659272,
//        -1.57524161, -1.8661989 , -0.55712422,  1.12615821, -2.04476854,
//        -0.50635004,  2.02854357, -0.99923365,  0.12580044,  0.04158833,
//         2.92869588,  0.19215344,  1.11546242, -2.52776023,  0.80935707,
//        -0.19956725,  2.21167081, -0.90130178, -1.33287631,  1.98239509,
//        -1.76003948,  2.36779838, -0.24183214, -0.30962498, -0.36009805,
//         0.17065241,  0.05915172,  1.1314701 , -0.28602959,  4.03728264,
//        -2.4119743 , -0.31761883, -0.35114626,  0.41059428, -1.87046497;
//
//   int numberCoef{10};
//   Eigen::VectorXd Coef(numberCoef);
//   Coef << -0.68517408,  0.31619721,  0.41684618, -0.04772924, -0.18273136,
//            0.05650831, -0.00537944, -0.08074328,  0.01440997, -0.0195281;
//
//   Eigen::VectorXd z_out(50);
//   z_out << -1.19167628, -0.35127327, -1.57039654,  0.13029518, -1.01929081,
//        -0.35902014,  0.34888894, -1.73722082, -1.66614934, -1.58175746,
//        -1.37867384, -1.05742372, -0.79222639, -0.72299874, -0.9931901 ,
//         0.20343302,  0.5218015 , -0.17852517, -0.94319447, -0.8781293 ,
//        -0.93724157, -0.38515915, -0.90497642, -0.5004183 , -0.97329863,
//        -0.52451762, -1.09379284, -0.74080096, -0.63265235, -0.28535781,
//        -0.27560507,  0.08471919, -2.0153361 , -2.07945077,  0.20207904,
//        -1.51890951,  0.3108359 , -1.18486885, -0.10710591, -0.69388798,
//        -1.43059083, -0.40424662, -0.74385148, -1.49559224,  0.65622755,
//         2.41660619, -0.15798995, -1.79011673, -0.60710636, -1.83928948;
//
//        //  -1.19167625, -0.35127327, -1.57039642,  0.13029514, -1.0192908 ,
//        // -0.35902014,  0.34888895, -1.7372207 , -1.66614928, -1.58175756,
//        // -1.37867382, -1.05742379, -0.79222638, -0.72299878, -0.9931901 ,
//        //  0.20343303,  0.52180151, -0.17852516, -0.94319451, -0.87812928,
//        // -0.93724157, -0.38515921, -0.90497641, -0.50041829, -0.97329863,
//        // -0.52451776, -1.09379285, -0.74080099, -0.63265232, -0.28535781,
//        // -0.27560506,  0.08471913, -2.01533614, -2.07945079,  0.202079  ,
//        // -1.51890948,  0.31083584, -1.18486885, -0.1071059 , -0.69388798,
//        // -1.43059087, -0.40424661, -0.74385152, -1.49559226,  0.65622731,
//        //  2.4166062 , -0.15798995, -1.79011677, -0.60710634, -1.83928946
//
//
//   int order{3};
//   Eigen::VectorXd z(50);
//
//   evaluate_surface(order,x_in,y_in,Coef,z);
//
//   for(int i(0); i<z.size(); i++)
//   {
//     EXPECT_NEAR(z[i], z_out[i], 1e-6);
//   }
// }
